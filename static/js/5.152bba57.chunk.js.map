{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","data","name","description","thumbnail","imgStyle","homepage","wiki","className","src","alt","style","to","id","href","encodeURIComponent","target","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","Math","floor","random","then","_transformCharDescription","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","charEnded","setCharEnded","offset","setOffset","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","resourceURI","split","slice","CharInfo","charId","CharSearchForm","loading","error","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","ErrorBoundary","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","message","useHttp","_apiBase","_apiKey","a","res","_transformCharacter","path","extension","urls","getAllComics","_transformComic","getComic","comic","title","price","prices","link","pageCount","language","textObjects","Skeleton","state","err","errInfo","console","log","this","setState","children"],"mappings":"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","file":"static/js/5.152bba57.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport { setContent } from '../../utils/setContent';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport {_transformCharDescription} from '../../services/MarvelService';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { Link } from 'react-router-dom';\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 6000);\r\n\r\n        // return() => {\r\n        //     clearInterval(timerId);\r\n        // }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400-1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(data => _transformCharDescription(data))\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                    </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <Link to={`/characters/${data.id}`} className=\"button button__main\">\r\n                        <div className=\"inner\">details</div>\r\n                    </Link>\r\n                    <a href={`https://www.google.com/search?q=${encodeURIComponent(name)} marvel character`} target=\"_blank\" className=\"button button__secondary\">\r\n                        <div className=\"inner\">Search</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;\r\n\r\n","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Link } from 'react-router-dom';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst setContent  = (process, Component, newItemLoading) => {\r\n    switch (process){\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: throw new Error ('Unexpected process state')\r\n    }\r\n}\r\n\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const [offset, setOffset] = useState(296);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if(newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(ended)\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        key={item.id}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if(e.key === ' ' || e.key === 'Enter'){\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                        <Link to={`/characters/${item.id}`}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo (() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [process]);\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                {elements}\r\n                <button className=\"button button__main button__long\"\r\n                        disabled={newItemLoading}\r\n                        style={{'display': charEnded ? 'none' : 'block'}}\r\n                        onClick={() => onRequest(offset)}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n            \r\n        )    \r\n}\r\n\r\nexport default CharList;","import {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport {_transformCharDescription} from '../../services/MarvelService';\r\nimport { setContent } from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if(!charId){\r\n            return\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n        .then(data => _transformCharDescription(data))\r\n        .then(onCharLoaded)\r\n        .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"char__basics\">\r\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <Link to={`/characters/${data.id}`} className=\"button button__main\">\r\n                                <div className=\"inner\">details</div>\r\n                            </Link>\r\n                            <a href={`https://www.google.com/search?q=${encodeURIComponent(name)} marvel character`} target=\"_blank\" className=\"button button__secondary\">\r\n                                <div className=\"inner\">Search</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"char__descr\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"char__comics\">Comics:</div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comics.length > 0 ? null : 'Comics with this character not found in database.'}\r\n                    {comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${(item.resourceURI).split('/').slice(-1)}`}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                        })\r\n                    }\r\n                </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n                />\r\n            <title>Marvel information portal</title>\r\n        </Helmet>\r\n        <ErrorBoundary>\r\n            <RandomChar/>\r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>           \r\n            </ErrorBoundary>\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>     \r\n            </div>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px',\r\n        height: '250px', objectFit: 'contain',\r\n        margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => { \r\n   const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/',\r\n         _apiKey = 'apikey=6b860c1151f1f1b315a6d1dd0a7f4269',\r\n         _baseOffsetCharacters = 296,\r\n         _baseOffsetComics = 10;\r\n\r\n   const getAllCharacters = async (offset = _baseOffsetCharacters) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n     }\r\n\r\n   const getCharacterByName = async (name) => {\r\n      const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n   const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n     }   \r\n\r\n   const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'Description not found',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n     }\r\n\r\n   const getAllComics = async (offset = _baseOffsetComics) => {\r\n      const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComic);\r\n   }\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComic(res.data.results[0]);\r\n   }\r\n\r\n   const _transformComic = (comic) => {\r\n      return {\r\n          id: comic.id,\r\n          title: comic.title,\r\n          price: !(comic.prices[0].price === 0) ? comic.prices[0].price : null,\r\n          thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`,\r\n          link: comic.urls[0].url,\r\n          description: comic.description,\r\n          pageCount: !(comic.pageCount === 0) ? comic.pageCount : null,\r\n          language: !(comic.textObjects.length === 0) ? comic.textObjects[0].language : null\r\n      }\r\n   }\r\n\r\n     return {\r\n         loading,\r\n         error,\r\n         process,\r\n         setProcess,\r\n         getCharacter,\r\n         getCharacterByName,\r\n         getAllCharacters,\r\n         clearError,\r\n         getAllComics,\r\n         getComic\r\n      }\r\n}\r\n\r\nexport const _transformCharDescription = (char) => {\r\n   char.description = char.description.length <= 200 ? char.description : `${char.description.slice(0, 200)}...`;\r\n   return char;\r\n} \r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if(!response.ok) {\r\n                throw new Error (`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setProcess('error');\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nexport const setContent  = (process, Component, data) => {\r\n    switch (process){\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: throw new Error ('Unexpected process state')\r\n    }\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch (err, errInfo) {\r\n        console.log(err, errInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}